{"version":3,"sources":["assets/images/logo.png","serviceWorker.js","helpers/consts.ts","helpers/auth.service.ts","store/authStore.ts","pages/Login/LoginPage.jsx","components/Sidebar/Sidebar.tsx","models/ConfigModel.js","components/Test/StepLoad.tsx","components/Test/ExpLoad.tsx","components/Test/Performance.tsx","components/Test/ConstLoad.tsx","helpers/uuid.ts","helpers/test.service.ts","components/Test/TestCreate.tsx","components/Test/UploadTest.tsx","pages/Tests/AddTest.jsx","pages/Tests/ViewTests.jsx","pages/Nodes/ViewNodes.tsx","helpers/node.service.ts","components/Series/RpsChart.tsx","components/Metrics/SystemMetrics.tsx","components/Metrics/DataInfo.tsx","components/Metrics/Info.tsx","components/Series/DepTimeChart.tsx","pages/Tests/DetailView.jsx","pages/Nodes/AddNode.jsx","pages/Nodes/RemoveNode.jsx","pages/Users/UsersList.tsx","helpers/user.service.ts","pages/Users/CreateUser.tsx","pages/IntroPage.tsx","helpers/doc.ts","pages/Dashboard.tsx","components/HeaderQuark.tsx","pages/MainPage.tsx","Root.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","API_HOST","GetHeaders","sessionStorage","getItem","GET_HEADERS","TEST_API","axios","create","baseURL","headers","NODE_API","AUTH_API","GET_LIST","GET_BY_ID","POST_CREATE","POST_REMOVE","checkToken","undefined","token","length","getSessionToken","authControl","observable","box","authStore","this","authState","userData","localStorage","setItem","JSON","stringify","set","removeItem","console","log","get","computed","action","Login","onFinish","className","Title","src","logo","alt","name","initialValues","remember","Item","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","htmlType","LoginPage","React","useState","setToken","useEffect","Fragment","values","authData","apiUrl","post","then","response","data","saveToken","Token","authorize","to","SubMenu","Menu","Sider","Layout","Sidebar","width","mode","defaultSelectedKeys","defaultOpenKeys","style","height","borderRight","key","title","ConfigModel","config","schedules","helpers","core","schedule","push","agent","StepLoad","getData","start","end","step","duration","fix","model","setModel","Group","compact","onChange","value","target","addonAfter","e","defaultValue","Option","ExpLoad","Performance","status","ConstLoad","uuidv4","replace","c","r","Math","random","toString","startTest","testRecord","ID","getSeries","id","resp","res","getTestById","TestCreate","setCore","setStatus","setConfig","routes","addRoute","setAgent","getAllData","exportConfig","typeCreate","testConfig","conf","shed","routing","addCore","addSchedule","addSshAgent","notification","open","onClick","catch","createAndRun","labelCol","span","wrapperCol","layout","padding","size","label","accordion","Panel","header","margin","url","map","route","idx","renderChildren","host","event","user","min","port","password","keyauth","color","Dragger","Upload","UploadTest","file","loadFile","sendFile","FormData","append","uploadFile","item","multiple","info","InboxOutlined","TabPane","Tabs","AddTest","onBack","subTitle","defaultActiveKey","tab","Column","Table","testAction","text","record","removeState","stat","Status","err","testId","ViewTests","testCollection","setCollection","needFetch","setNeedFetch","dataSource","dataIndex","render","ColumnGroup","updateState","ViewNodes","isUpdated","setUpdate","RpsChart","source","level","bottom","dataKey","stroke","strokeDasharray","SystemMetrics","sysMetrics","cpu","free","cached","disk","DateInfo","timeConvert","date","Date","toLocaleString","UpdatedAt","EndTime","Info","rps","avRes","minRes","DepTimeChart","top","right","left","activeDot","DetailView","useParams","test","setTest","series","setSeries","temp","setTemp","mapValues","someArr","time","code","respTime","Promise","all","Series","interval","setInterval","a","clearInterval","avr","mapExpresssion","reduce","b","rpSource","maxRes","tags","Uuid","collapsed","parse","ConfigFile","root","AddNode","Host","DatabaseUrl","nodeConfig","RemoveNode","userId","UsersList","CreateUser","Username","Password","AccessLevel","setUserData","IntroPage","doc","setDoc","md","Dashboard","path","component","Header","menu","HeaderQuark","inject","observer","props","toJS","getAuthState","overlay","preventDefault","DownOutlined","Component","MainPage","Content","logout","strict","exact","extra","Root","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,yICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kMChBAC,EAAQ,4BAEd,SAASC,IACL,MAAO,CACH,8BAA+B,IAC/B,eAAgB,mBAChB,MAASC,eAAeC,QAAQ,UAIzB,OACXH,WACAI,YAAaH,EACbI,SAAUC,IAAMC,OAAO,CAAEC,QAAQ,GAAD,OAAKR,EAAL,UAAuBS,QAASR,MAChES,SAAUJ,IAAMC,OAAO,CAAEC,QAAQ,GAAD,OAAKR,EAAL,UAAuBS,QAASR,MAChEU,SAAUL,IAAMC,OAAO,CAAEC,QAAQ,GAAD,OAAKR,EAAL,UAAuBS,QAASR,MAEhEW,SAAU,QACVC,UAAW,QACXC,YAAa,UACbC,YAAa,Y,OCsBV,SAASC,IACZ,YAA0BC,IATvB,WACH,IAAMC,EAAQhB,eAAeC,QAAQ,SACrC,GAAc,OAAVe,QAA4BD,IAAVC,GAAuBA,EAAMC,OAAS,GAAe,KAAVD,EAC7D,OAAOA,EAMPE,GAMD,I,IAAMC,EAAcC,IAAWC,IAAIP,K,kBCrB7BQ,G,OAAY,IA1BzB,aAGI,aAAe,yDACXC,KAAKC,UAAYJ,IAAWC,KAAI,GAJxC,qDAUqBI,GACbC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUJ,MAXpD,kCAeQF,KAAKC,UAAUM,IAAIhB,OAf3B,+BD8BId,eAAe+B,WAAW,SCXtBC,QAAQC,IAAI,UAEZV,KAAKC,UAAUM,KAAI,KArB3B,mCAQQ,OAAOP,KAAKC,UAAUU,UAR9B,4CACKd,KADL,sGAOKe,KAPL,6GAUKC,KAVL,0GAcKA,KAdL,wGAiBKA,KAjBL,uECUMC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACV,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAMA,UAAU,aACZ,kBAAC,IAAWC,MAAZ,oFACA,yBAAKC,IAAKC,IAAMC,IAAI,KACpB,kBAAC,IAAD,CACIC,KAAK,eACLL,UAAU,aACVM,cAAe,CAAEC,UAAU,GAC3BR,SAAUA,GAGV,kBAAC,IAAKS,KAAN,CACIH,KAAK,WACLI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,4IAEnC,kBAAC,IAAD,CAAOC,OAAQ,kBAACC,EAAA,EAAD,CAAcb,UAAU,wBAA0Bc,YAAY,cAEjF,kBAAC,IAAKN,KAAN,CACIH,KAAK,WACLI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,8JAEnC,kBAAC,IAAD,CACIC,OAAQ,kBAACG,EAAA,EAAD,CAAcf,UAAU,wBAChCgB,KAAK,WACLF,YAAY,cAGpB,kBAAC,IAAKN,KAAN,KACI,kBAAC,IAAD,CAAQQ,KAAK,UAAUC,SAAS,SAASjB,UAAU,qBAAnD,uCA6BLkB,MAtBf,WAAsB,IAAD,EACSC,IAAMC,SAAS7C,KADxB,mBACVE,EADU,KACH4C,EADG,KAcjB,OAHAF,IAAMG,WAAU,WACZ7B,QAAQC,IAAI,mBACb,CAACjB,IAEA,kBAAC,IAAM8C,SAAP,MACe,IAAV9C,EAAkB,kBAAC,EAAD,CAAOsB,SAdjB,SAAAyB,GF/Bd,IAAmBC,EEgClBhC,QAAQC,IAAI8B,IFhCMC,EEiCRD,EFhCd/B,QAAQC,IAAI+B,GACLC,EAAOxD,SACTyD,KAAK,QAASF,GACdG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SE8BtBF,MAAK,aF3BX,SAAmBnD,GACtBG,EAAYW,IAAId,GAChBhB,eAAe2B,QAAQ,QAASX,GAChCgB,QAAQC,IAAIjC,eAAeC,QAAQ,UEyBvBqE,CADiB,EAAZC,OAELjD,EAAUkD,YACVZ,EAAS9C,WAQsC,kBAAC,IAAD,CAAU2D,GAAG,iB,sDC5DpEC,EAAYC,IAAZD,QACAE,EAAUC,IAAVD,MAuDOE,MAtDf,WACI,OACI,oCACI,kBAACF,EAAD,CAAOG,MAAO,IAAKxC,UAAU,0BACzB,kBAAC,IAAD,CACIyC,KAAK,SACLC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,MAAO,CAAEC,OAAQ,OAAQC,YAAa,IAEtC,kBAACX,EAAD,CACIY,IAAI,OACJC,MACI,8BACI,kBAAC,IAAD,MADJ,6EAMJ,kBAAC,IAAKxC,KAAN,CAAWuC,IAAI,KAAI,kBAAC,IAAD,CAAMb,GAAG,uBAAT,4DACnB,kBAAC,IAAK1B,KAAN,CAAWuC,IAAI,KAAI,kBAAC,IAAD,CAAMb,GAAG,wBAAT,iDAEvB,kBAACC,EAAD,CACIY,IAAI,OACJC,MACI,8BACI,kBAAC,IAAD,MADJ,wEAMJ,kBAAC,IAAKxC,KAAN,CAAWuC,IAAI,KAAI,kBAAC,IAAD,CAAMb,GAAG,uBAAT,8EACnB,kBAAC,IAAK1B,KAAN,CAAWuC,IAAI,MAAK,kBAAC,IAAD,CAAMb,GAAG,wBAAT,8BAGxB,kBAACC,EAAD,CACIY,IAAI,OACJC,MACI,8BACI,kBAAC,IAAD,MADJ,6EAMJ,kBAAC,IAAKxC,KAAN,CAAWuC,IAAI,KAAI,kBAAC,IAAD,CAAMb,GAAG,wBAAT,sDACnB,kBAAC,IAAK1B,KAAN,CAAWuC,IAAI,OAAM,kBAAC,IAAD,CAAMb,GAAG,yBAAT,+C,iECjDhCe,GAAb,WAEI,aAAe,oBACXjE,KAAKkE,OAAS,CAEV,aAAc,CAAEC,UAAW,GAAIC,QAAS,KALpD,oDASYC,GACJrE,KAAKkE,OAAL,eAAmBlE,KAAKkE,OAAxB,GAAmCG,KAV3C,kCAkBgBC,GACRtE,KAAKkE,OAAO,cAAcC,UAAUI,KAAKD,KAnBjD,kCA2BgBE,GACRxE,KAAKkE,OAAO,cAAcE,QAAU,CAAE,YAAaI,OA5B3D,KCAe,SAASC,GAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EAChBvC,IAAMC,SAAS,CAAEuC,MAAO,EAAGC,IAAK,EAAGC,KAAM,EAAGC,SAAU,KAAMC,IAAK,MADjD,mBACnCC,EADmC,KAC5BC,EAD4B,KAE1C9C,IAAMG,WAAU,kBAAMoC,EAAQM,MAY9B,OAEI,kBAAC,IAAMzC,SAAP,KAEI,kBAAC,IAAM2C,MAAP,CAAaC,SAAO,GAChB,kBAAC,KAAD,CACIC,SAAU,SAAAC,QACQ7F,IAAV6F,GACAJ,EAAS,eAAKD,EAAN,CAAaL,MAAOU,MAKpCzB,MAAO,CAAEJ,MAAO,SAChB1B,YAAY,gHAEhB,kBAAC,KAAD,CACIsD,SAAU,SAAAC,GACFA,GACAJ,EAAS,eAAKD,EAAN,CAAaJ,IAAKS,MAGlCzB,MAAO,CAAEJ,MAAO,SAChB1B,YAAY,0GAEhB,kBAAC,KAAD,CACIsD,SAAU,SAAAC,GACFA,GACAJ,EAAS,eAAKD,EAAN,CAAaH,KAAMQ,MAGnCzB,MAAO,CAAEJ,MAAO,SAChB1B,YAAY,4EAEhB,kBAAC,IAAD,CACIsD,SAAU,SAAAC,GACNJ,EAAS,eAAKD,EAAN,CAAaF,SAAUO,EAAMC,OAAOD,UAEhDzB,MAAO,CAAEJ,MAAO,SAChB+B,WAhDR,kBAAC,KAAD,CAAQH,SAAU,SAACI,GAAD,OAAOP,EAAS,eAAKD,EAAN,CAAaD,IAAKS,MAAMC,aAAa,IAClEzE,UAAU,gBACV,kBAAC,KAAO0E,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,uBACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,YA4CII,aAAa,QCtDlB,SAASE,GAAT,GAA6B,IAAXjB,EAAU,EAAVA,QAAU,EACbvC,IAAMC,SAAS,CAACiD,MAAO,EAAGP,SAAU,IAAKC,IAAK,KADjC,mBAChCC,EADgC,KACzBC,EADyB,KAEvC9C,IAAMG,WAAU,kBAAMoC,EAAQM,MAY9B,OACI,kBAAC,IAAMzC,SAAP,KAEI,kBAAC,IAAM2C,MAAP,CAAaC,SAAO,GAChB,kBAAC,KAAD,CAAavB,MAAO,CAACJ,MAAO,SAAU1B,YAAY,wGAAwBsD,SAAU,SAAAC,QACrE7F,IAAR6F,GACCJ,EAAS,eAAID,EAAL,CAAYK,MAAOA,QAGnC,kBAAC,IAAD,CAAOzB,MAAO,CAACJ,MAAO,SAAU+B,WAlBpC,kBAAC,KAAD,CAAQH,SAAU,SAACI,GAAD,OAAOP,EAAS,eAAID,EAAL,CAAYD,IAAKS,MAAKC,aAAa,IAC5DzE,UAAU,gBACd,kBAAC,KAAO0E,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,uBACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,YAayDI,aAAa,IAAIL,SAAU,SAAAC,GAChFJ,EAAS,eAAID,EAAL,CAAYF,SAAUO,EAAMC,OAAOD,c,cCzBhD,SAASO,GAAT,GAAiC,IAAXlB,EAAU,EAAVA,QAAU,EACjBvC,IAAMC,SAAS,CAACyD,QAAO,IADN,mBACpCb,EADoC,KAC7BC,EAD6B,KAG3C,OADA9C,IAAMG,WAAU,kBAAMoC,EAAQM,MAE1B,kBAAC,IAAMzC,SAAP,KACI,kBAAC,KAAD,CAAU6C,SAAU,SAACC,GACjBJ,EAAS,CAACY,OAAQR,EAAMC,OAAOD,UADnC,yCCJG,SAASS,GAAT,GAA+B,IAAXpB,EAAU,EAAVA,QAAU,EACfvC,IAAMC,SAAS,CAACiD,MAAO,EAAGP,SAAU,IAAKC,IAAK,KAD/B,mBAClCC,EADkC,KAC3BC,EAD2B,KAEzC9C,IAAMG,WAAU,kBAAMoC,EAAQM,MAY9B,OACI,kBAAC,IAAMzC,SAAP,KAEI,kBAAC,IAAM2C,MAAP,CAAaC,SAAO,GAChB,kBAAC,KAAD,CACIvB,MAAO,CAACJ,MAAO,SACf1B,YAAY,wGACZsD,SAAU,SAAAC,QACK7F,IAAR6F,GACCJ,EAAS,eAAID,EAAL,CAAYK,MAAOA,QAGvC,kBAAC,IAAD,CACIzB,MAAO,CAACJ,MAAO,SACf+B,WAvBR,kBAAC,KAAD,CAAQH,SAAU,SAACI,GAAD,OAAOP,EAAS,eAAID,EAAL,CAAYD,IAAKS,MAAKC,aAAa,IAC5DzE,UAAU,gBACd,kBAAC,KAAO0E,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,uBACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,WACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,KAArB,YAmBII,aAAa,IACbL,SAAU,SAAAC,GACNJ,EAAS,eAAID,EAAL,CAAYF,SAAUO,EAAMC,OAAOD,cCnCpD,SAASU,KACpB,MAAO,uCAAuCC,QAAQ,SAAS,SAAUC,GAErE,IAAMC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC/B,OAD4C,MAANH,EAAYC,EAAS,EAAJA,EAAU,GACxDG,SAAS,OC+BnB,SAASC,GAAUC,GAGtB,OAFA9F,QAAQC,IAAIL,KAAKC,UAAUiG,IAEpB7D,EAAO9D,SACT+D,KADE,eACW4D,EAAWC,KACxB5D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QA0C5B,SAAS2D,GAAUC,GACtB,OAAOhE,EAAO9D,SACT+B,IAAI,WAAa+F,GACjB9D,MAAK,SAAA+D,GAEF,OADAlG,QAAQC,IAAIiG,EAAK7D,MACV6D,KACR/D,MAAK,SAAAgE,GAAG,OAAIA,EAAI9D,QAOpB,SAAS+D,GAAYH,GACxB,OAAOhE,EAAO9D,SACT+B,IAAI+B,EAAOtD,UAAYsH,GACvB9D,MAAK,SAAA+D,GAEF,OADAlG,QAAQC,IAAIiG,EAAK7D,MACV6D,KACR/D,MAAK,SAAAgE,GAAG,OAAIA,EAAI9D,Q,cC1FZ,SAASgE,KAAc,IAAD,EACT3E,IAAMC,SAAS,CAAEf,KAAM,GAAI,cAAe,KADjC,mBAC1BgD,EAD0B,KACpB0C,EADoB,OAGL5E,IAAMC,SAAS,aAHV,mBAG1ByD,EAH0B,KAGlBmB,EAHkB,OAOL7E,IAAMC,WAPD,mBAO1B8B,EAP0B,KAOlB+C,EAPkB,OAWN9E,IAAMC,SAAgB,IAXhB,mBAW1B8E,EAX0B,KAWlBC,EAXkB,OAaPhF,IAAMC,SAAc,IAbb,mBAa1BoC,EAb0B,KAanB4C,EAbmB,KAejC9E,qBAAU,kBAAM7B,QAAQC,IAAI8D,KAAQ,CAACA,IAMrC,IAAM6C,EAAa,SAACnD,GAAD,OACf+C,EAAU/C,IAMRoD,EAAe,SAACC,GAClB,IDlCmBC,ECkCbC,EAAO,IAAIxD,GACXyD,EAAO,CAAEC,QAAQ,aAAKT,IAC5BzG,QAAQC,IAAIwD,GACZA,EAAOY,SAAWZ,EAAOY,SAAWZ,EAAOa,IAC3C2C,EAAK7B,GAAU3B,EAEfuD,EAAKG,QAAQvD,GACboD,EAAKI,YAAYH,GAEjBD,EAAKK,YAAYtD,GACb+C,GD5CeC,EC6CJC,EAAKvD,OD5CxBzD,QAAQC,IAAI8G,GACL9E,EAAO9D,SACT+D,KAAKD,EAAOrD,YAAamI,GACzB5E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCyCCF,MAAK,WACzBmF,KAAaC,KAAK,CACdrG,QAAS,2GACTsG,QAAS,kBAIdC,OAAM,WACLH,KAAaC,KAAK,CACdrG,QAAS,uHACTsG,QAAS,kBDlCtB,SAAsBT,GACzB,OAAO9E,EAAO9D,SACT+D,KAAKD,EAAOrD,YAAamI,GACzB5E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BF,MAAK,SAACoC,GAAD,OAAWsB,GAAUtB,MCoCvBmD,CAAaV,EAAKvD,QAAQtB,MAAK,WAC3BmF,KAAaC,KAAK,CACdrG,QAAS,iHACTsG,QAAS,kBAIdC,OAAM,WACLH,KAAaC,KAAK,CACdrG,QAAS,iHACTsG,QAAS,mBASzB3F,qBAAU,kBAAM7B,QAAQC,IAAIwD,KAAS,CAACA,IAoBtC,OAGI,kBAAC,IAAD,CACIkE,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,OAAO,aACP3E,MAAO,CAAE4E,QAAS,eAElBC,KAAK,UAGL,kBAAC,IAAKjH,KAAN,CAAWkH,MAAM,2GACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAI0B,EAAQ,eAAK1C,EAAN,CAAYhD,KAAMgE,EAAMC,OAAOD,aAEpE,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,2GACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAI0B,EAAQ,eAAK1C,EAAN,CAAY,cAAegB,EAAMC,OAAOD,UACrEvD,YAAY,4BAEpB,kBAAC,IAAKN,KAAN,CAAWkH,MAAM,qGAEb,kBAAC,KAAD,CAAUC,WAAS,GACf,kBAAC,KAASC,MAAV,CAAgBC,OAAO,oGAAoB9E,IAAI,KAC3C,kBAAC,IAAD,CAAQH,MAAO,CAAEkF,OAAQ,QAAU9G,KAAK,UACpCiG,QAAS,SAAAzC,GAAC,OAAI2B,EAAS,GAAD,oBAAKD,GAAL,CAAa,CAC/B6B,IAAK,GACL,YAAe,MACf,WAAc,UAJtB,6EASC7B,GAAUA,EAAO8B,KAAI,SAACC,EAAOC,GAAR,OAClB,kBAAC,IAAK1H,KAAN,CAAWuC,IAAKgC,KAAU2C,MAAOQ,EAAM,GACnC,kBAAC,IAAD,CAEIpH,YAAY,yBACZ2D,aAAcwD,EAAMF,IACpB3D,SAAU,SAAAI,GACNyD,EAAMF,IAAMvD,EAAEF,OAAOD,gBAWjD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,6HACb,kBAAC,KAAD,CAAQjD,aAAa,YAAYL,SAAU,SAAAC,GAAK,OAAI2B,EAAU3B,KAC1D,kBAAC,KAAOK,OAAR,CAAeL,MAAM,aAArB,qGACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,cAArB,sEACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,YAArB,qJACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,oBAArB,6HACA,kBAAC,KAAOK,OAAR,CAAeL,MAAM,cAArB,2FAIR,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,mIA9EF,WACnB,OAAQ7C,GACJ,IAAK,YACD,OAAO,kBAACpB,GAAD,CAAUC,QAAS2C,IAC9B,IAAK,WACD,OAAO,kBAAC1B,GAAD,CAASjB,QAAS2C,IAC7B,IAAK,mBACD,OAAO,kBAACzB,GAAD,CAAalB,QAAS2C,IACjC,QACI,OAAO,kBAACvB,GAAD,CAAWpB,QAAS2C,KAsE1B8B,IAEL,kBAAC,IAAK3H,KAAN,CAAWkH,MAAM,iHACb,kBAAC,KAAD,CAAUC,WAAS,GACf,kBAAC,KAASC,MAAV,CAAgBC,OAAO,gHAAsB9E,IAAI,KAC7C,kBAAC,IAAD,CACIqE,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,OAAO,aAGPE,KAAK,UAEL,kBAAC,IAAKjH,KAAN,CAAWkH,MAAM,4BACb,kBAAC,IAAD,CAAOrD,MAAOb,EAAM4E,KAAMhE,SAAU,SAAAiE,GAChCjC,EAAS,eAAK5C,EAAN,CAAa4E,KAAMC,EAAM/D,OAAOD,aAGhD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,4EACb,kBAAC,IAAD,CAAOrD,MAAOb,EAAM8E,KAAMlE,SAAU,SAAAiE,GAChCjC,EAAS,eAAK5C,EAAN,CAAa8E,KAAMD,EAAM/D,OAAOD,aAGhD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,4BACb,kBAAC,KAAD,CAAaa,IAAK,EAAGnE,SAAU,SAAAC,GAC3B+B,EAAS,eAAK5C,EAAN,CAAagF,KAAMnE,SAGnC,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,wCACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAiE,GACbjC,EAAS,eAAK5C,EAAN,CAAaiF,SAAUJ,EAAM/D,OAAOD,aAGpD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,mFACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAiE,GACbjC,EAAS,eAAK5C,EAAN,CAAakF,QAASL,EAAM/D,OAAOD,iBAOnE,kBAAC,IAAK7D,KAAN,CAAWR,UAAU,kBACjB,kBAAC,IAAD,CAAQ2I,MAAM,UAAU1B,QAAS,kBAAMX,GAAa,KAApD,wHACA,kBAAC,IAAD,CAAQW,QAAS,kBAAMX,GAAa,KAApC,4D,wBCtNRsC,GAAYC,KAAZD,QAoCOE,OAlCf,WAAuB,IAAD,EACO3H,IAAMC,WADb,mBACX2H,EADW,KACLC,EADK,KAEZC,EAAW,YFQd,SAAoBF,GACvB,IAAMjH,EAAO,IAAIoH,SAEjB,OADApH,EAAKqH,OAAO,OAAQJ,GACbrH,EAAO9D,SAAS+D,KAAK,UAAWG,EAAM,CACzC9D,QAAS,CACL,eAAgB,eAErB4D,MAAK,SAAAgE,GAAG,OAAIA,EAAI9D,SEdfsH,CAAWL,GAAMnH,MAAK,SAAAyH,GAAI,OAAItC,KAAaC,KAAK,CAC5CrG,QAAS,2GACTsG,QAAS,mBAKjB,OACI,6BACI,kBAAC2B,GAAD,CACIvI,KAAK,OACLiJ,UAAU,EACVlF,SAAU,SAAAmF,GACNP,EAASO,EAAKR,QAGlB,uBAAG/I,UAAU,wBACT,kBAACwJ,GAAA,EAAD,OAEJ,uBAAGxJ,UAAU,mBAAb,qOAGJ,kBAAC,IAAKQ,KAAN,CAAWR,UAAU,kBAEjB,kBAAC,IAAD,CAAQiH,QAAS,kBAAMgC,MAAvB,0DACA,kBAAC,IAAD,4DC5BRQ,GAAYC,IAAZD,QACO,SAASE,KACpB,OACI,kBAAC,IAAMpI,SAAP,KACI,kBAAC,IAAD,CACIvB,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,2JACN6G,SAAS,oFAEb,6BACI,kBAAC,IAAD,CAAMC,iBAAiB,IAAI9I,KAAK,QAC5B,kBAACyI,GAAD,CAASM,IAAI,kFAAiBhH,IAAI,KAC9B,kBAAC+C,GAAD,OAEJ,kBAAC2D,GAAD,CAASM,IAAI,kFAAiBhH,IAAI,KAC9B,kBAAC,GAAD,U,cCjBhBiH,GAAWC,KAAXD,OAGFE,GAAa,SAACC,EAAMC,EAAQvK,EAAQwK,GAEtC,OACI,kBAAC,IAAM9I,SAAP,KACI,kBAAC,IAAD,CAAMW,GAAE,iCAA4BkI,EAAO5E,KAA3C,8CADJ,qBAGI,kBAAC,IAAD,CAAQyB,QAAS,WACb,IJ2BS1B,EI3BH+E,EAA0B,WAAlBF,EAAOG,OAAsB,+DAAe,6CACpC,WAAlBH,EAAOG,OACPjF,GAAU8E,GAAQxI,MAAK,kBAAMmF,KAAaC,KAAK,CAC3CrG,QAAQ,4BAAD,OAAU2J,EAAV,qDAEP1I,MACA,kBAAM/B,GAAQwK,MAChBnD,OAAM,SAAAsD,GAAG,OAAIzD,KAAaC,KAAK,CAC7BrG,QAAS,2FAAmB2J,EAAnB,OAA8BE,EAAI7J,cJmB1C4E,EIfI6E,EJgBzB3K,QAAQC,IAAIL,KAAKC,UAAUiG,IAEpB7D,EAAO9D,SACT+D,KADE,gBACY4D,EAAWC,KACzB5D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SIpBEF,MAAK,kBAAMmF,KAAaC,KAAK,CAC1CrG,QAAQ,4BAAD,OAAU2J,EAAV,qDACP1I,MACA,kBAAM/B,GAAQwK,MAChBnD,OAAM,SAAAsD,GAAG,OAAIzD,KAAaC,KAAK,CAC7BrG,QAAS,2FAAmB2J,EAAnB,OAA8BE,EAAI7J,eAKjC,WAAlByJ,EAAOG,OAAsB,+DAAe,0DA1BpD,qBA4BI,kBAAC,IAAD,CAAQtD,QAAS,WJYtB,IAAoBwD,KIXAL,EAAO5E,GJavB9D,EAAO9D,SACT+D,KAAKD,EAAOpD,YAAcmM,GAC1B7I,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SIfGF,MAAK,kBAAMmF,KAAaC,KAAK,CAC/CrG,QAAS,2GACTsG,QAAS,kBAETrF,MACA,kBAAM/B,GAAQwK,QANtB,gDAaG,SAASK,KAAa,IAAD,EACQvJ,IAAMC,SAAS,IADvB,mBACzBuJ,EADyB,KACTC,EADS,OAEEzJ,IAAMC,UAAS,GAFjB,mBAEzByJ,EAFyB,KAEdC,EAFc,KAWhC,OARA3J,IAAMG,WAAU,WJITI,EAAO9D,SACT+B,IAAI+B,EAAOvD,UACXyD,MAAK,SAAA+D,GAGF,OADAlG,QAAQC,IAAIiG,GACLA,EAAK7D,QAEfF,MAAK,SAAAgE,GACF,GAAIA,GAAe,qBAARA,GAA8BA,EAAIlH,OAAS,EAClD,OAAOkH,EAAIoC,KAAI,SAAAqB,GAAI,sBAAUA,EAAV,CAAgBtG,IAAKsG,EAAK7D,WIZvC5D,MAAK,SAAAE,GACfrC,QAAQC,IAAI,eACZkL,EAAc9I,QAGnB,CAAC+I,IAGA,kBAAC,IAAMtJ,SAAP,KACI,kBAAC,IAAD,CACIvB,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,wHAEV,kBAAC,KAAD,CAAO+H,WAAYJ,EAAgB3K,UAAU,eACzC,kBAACgK,GAAD,CAAQhH,MAAM,mCAAUgI,UAAU,KAAKjI,IAAI,OAC3C,kBAACiH,GAAD,CAAQhH,MAAM,2EAAegI,UAAU,OAAOjI,IAAI,SAClD,kBAACiH,GAAD,CAAQhH,MAAM,4EAAgBgI,UAAU,SAASjI,IAAI,WACrD,kBAACiH,GAAD,CAAQhH,MAAM,mDAAWgI,UAAU,YAAYjI,IAAI,cACnD,kBAACiH,GAAD,CAAQhH,MAAM,sEAAegI,UAAU,SAASjI,IAAI,WACpD,kBAACiH,GAAD,CACIhH,MAAM,mDACND,IAAI,SACJkI,OAAQ,SAACd,EAAMC,GAAP,OAAkBF,GAAWC,EAAMC,EAAQU,EAAcD,Q,ICzE7Eb,GAAwBC,KAAxBD,OAEFE,IAF0BD,KAAhBiB,YAEG,SAACf,EAAMC,EAAQvK,EAAQsL,GAAvB,OACf,kBAAC,IAAM5J,SAAP,KAEI,kBAAC,IAAD,CAAQ0F,QAAS,WCDlB,IAAoBvB,KDEJ0E,EAAO5E,GCDnB9D,EAAOzD,SACT0D,KAAKD,EAAOpD,YAAcoH,GAC1B9D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SDDDF,MAAK,kBAAMmF,KAAaC,KAAK,CAC/CrG,QAAS,2GACTsG,QAAS,kBAETrF,MAAK,kBAAM/B,GAAQsL,QAL3B,iDAUO,SAASC,KAAa,IAAD,EACQjK,IAAMC,SAAS,IADvB,mBACzBuJ,EADyB,KACTC,EADS,OAEDzJ,IAAMC,UAAS,GAFd,mBAEzBiK,EAFyB,KAEdC,EAFc,KAWhC,OAPAnK,IAAMG,WAAU,WCRTI,EAAOzD,SACT0D,KAAKD,EAAOvD,UACZyD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QDObF,MAAK,SAAAE,GACF,qBAATA,GACA8I,EAAc9I,QAGvB,CAACuJ,IAEA,kBAAC,IAAM9J,SAAP,KACI,kBAAC,IAAD,CACIvB,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,wEAEV,kBAAC,KAAD,CAAO+H,WAAYJ,EAAgB3K,UAAU,eACzC,kBAAC,GAAD,CAAQgD,MAAM,6BAASgI,UAAU,OAAOjI,IAAI,SAC5C,kBAAC,GAAD,CAAQC,MAAM,8CAAWgI,UAAU,OAAOjI,IAAI,SAC9C,kBAAC,GAAD,CAAQC,MAAM,oEAAkBgI,UAAU,cAAcjI,IAAI,gBAC5D,kBAAC,GAAD,CACIC,MAAM,mDACND,IAAI,SACJkI,OAAQ,SAACd,EAAMC,GAAP,OAAkBF,GAAWC,EAAMC,EAAQkB,EAAWD,Q,2CE1CnE,SAASE,GAAT,GAA+B,IAAXC,EAAU,EAAVA,OAG/B,OAFA/L,QAAQC,IAAI8L,GAGR,yBAAKxL,UAAU,eACX,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,wMACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAW3J,KAAM0J,EAAQ1D,OAAQ,CAC7B4D,OAAQ,KAER,kBAAC,KAAD,CAAOC,QAAQ,SACf,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAeC,OAAO,OAAOC,gBAAgB,QAC7C,kBAAC,KAAD,CAAM7K,KAAK,WAAW2K,QAAQ,MAAMC,OAAO,YAC3C,kBAAC,KAAD,MACA,kBAAC,KAAD,SChBL,SAASE,GAAT,GAAwC,IAAfC,EAAc,EAAdA,WAEpC,OACI,yBAAK/L,UAAU,aACX,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,qGACA,2BAAG,0BAAMzL,UAAU,aAAhB,WAAqC+L,EAAWC,MACnD,2BAAG,0BAAMhM,UAAU,aAAhB,cAAwC+L,EAAWE,OACtD,2BAAG,0BAAMjM,UAAU,aAAhB,gBAA0C+L,EAAWG,SACxD,2BAAG,0BAAMlM,UAAU,aAAhB,0BAAoD+L,EAAWI,QCR/D,SAASC,GAAT,GAA+B,IAAXZ,EAAU,EAAVA,OACzBa,EAAc,SAACC,GACjB,OAAO,IAAIC,KAAKD,GAAME,kBAE1B,OACI,yBAAKxM,UAAU,aACX,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,yIAEA,yBAAKzL,UAAU,YACX,0BAAMA,UAAU,aAAhB,mIAA0DwL,EAAOjB,QAGrE,yBAAKvK,UAAU,YACX,0BAAMA,UAAU,aAAhB,uEADJ,IACqDqM,EAAYb,EAAOiB,YAExE,yBAAKzM,UAAU,YACX,0BAAMA,UAAU,aAAhB,yFADJ,IACwDqM,EAAYb,EAAOkB,WChBxE,SAASC,GAAT,GAAyB,IAAVnB,EAAS,EAATA,OAE1B,OACI,yBAAKxL,UAAU,aACX,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,yIACA,2BAAG,0BAAMzL,UAAU,aAAhB,mKAAH,IAAqEwL,EAAOoB,KAC5E,2BAAG,0BAAM5M,UAAU,aAAhB,kHAAH,IAA4DwL,EAAOqB,OACnE,2BAAG,0BAAM7M,UAAU,aAAhB,gJAAH,IAAiEwL,EAAOsB,QACxE,2BAAG,0BAAM9M,UAAU,aAAhB,0IAAH,IAAgEwL,EAAOsB,S,mCCqBpEC,OAzBf,YAAmC,IAAXvB,EAAU,EAAVA,OACpB,OACI,yBAAKxL,UAAU,eACX,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,gTACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAEI3J,KAAM0J,EACN1D,OAAQ,CACJkF,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIxB,OAAQ,IAGzC,kBAAC,KAAD,CAAeG,gBAAgB,QAC/B,kBAAC,KAAD,CAAOF,QAAQ,SACf,kBAAC,KAAD,MACA,kBAAC,KAAD,MACA,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAM3K,KAAK,WAAW2K,QAAQ,MAAMC,OAAO,UAAUuB,UAAW,CAAEjI,EAAG,KACrE,kBAAC,KAAD,CAAMlE,KAAK,WAAW2K,QAAQ,WAAWC,OAAO,gBCdrD,SAASwB,KAAc,IAC5B1H,EAAO2H,cAAP3H,GAD2B,EAETvE,IAAMC,WAFG,mBAE1BkM,EAF0B,KAEpBC,EAFoB,OAGLpM,IAAMC,cAAS5C,GAHV,mBAG1BgP,EAH0B,KAGlBC,EAHkB,OAITtM,IAAMC,SAAS,GAJN,mBAI1BsM,EAJ0B,KAIpBC,EAJoB,KAM3BC,EAAY,SAACC,GAAD,OAAaA,EAAQrM,OAAOwG,KAAI,SAAAqB,GAAI,MAAK,CACvDyE,KAAMzE,EAAK,GACX0E,KAAM1E,EAAK,GACX2E,SAAU3E,EAAK,GACfuD,IAAKvD,EAAK,QAEdlI,IAAMG,WAAU,WACZ7B,QAAQC,IAAI,gBACZuO,QAAQC,IAAI,CACRrI,GAAYH,GACP9D,MAAK,SAAAyH,GACFkE,EAAQlE,MAGhB5D,GAAUC,GACL9D,MAAK,SAAAyH,GACEA,GAAQA,EAAK3K,OAAS,GAAwB,OAAnB2K,EAAK,GAAG8E,QACnCV,EAAUG,EAAUvE,EAAK,GAAG8E,OAAO,YAGpD,CAACzI,IACJvE,IAAMG,WAAU,WACZ,IAEM8M,EAAWC,YAAW,wBAAC,uBAAAC,EAAA,+EACzB7I,GAAUC,GACL9D,MAAK,SAAAyH,GACEA,GAAQA,EAAK3K,OAAS,GAAwB,OAAnB2K,EAAK,GAAG8E,SAEnCV,EAAUG,EAAUvE,EAAK,GAAG8E,OAAO,KACnC1O,QAAQC,IACJ,QAEAgO,EAAOrE,EAAK,GAAG8E,OAAO,GAAG3M,OAAO9C,SAChCe,QAAQC,IACJ,QAEJ6O,cAAcH,IAElBT,EAAQtE,EAAK,GAAG8E,OAAO,GAAG3M,OAAO9C,aAfpB,2CAsBvB,OAGP,CAACgH,EAAIgI,IAGR,IAAMc,EAAM,SAAC1M,EAAM2M,GACf,OAAI3M,GACYA,EAAKkG,IAAIyG,GAAgBC,QAAO,SAACJ,EAAGK,GAAJ,OAAUL,EAAIK,IAAG,GAC/C7M,EAAKpD,QAGZ,GAGTkQ,EAAW,CAAEhC,IAAK4B,EAAIhB,GAAQ,SAACnE,GAAD,OAAUA,EAAKuD,OAAMC,MAAO2B,EAAIhB,GAAQ,SAACnE,GAAD,OAAUA,EAAKyE,KAAOzE,EAAK2E,YAAWa,OAAQ,QAAS/B,OAAQ,OAC3I,OACI,kBAAC,IAAMvL,SAAP,KACK+L,GAAQ,kBAAC,IAAD,CACLtN,UAAU,mBACV4J,OAAQ,kBAAM,MACdkF,KAAM,oCAAE,kBAAC,KAAD,CAAKnG,MAAM,QAAQ2E,EAAKyB,KAAxB,KAAF,IAAuC,kBAAC,KAAD,CAAKpG,MAAM,SAAS2E,EAAK/C,OAAzB,MAC7CvH,MAAK,kJAET,6BACI,yBAAKhD,UAAU,mBACCxB,IAAXgP,GAAwB,kBAACjC,GAAD,CAAUC,OAAQgC,KAE/C,yBAAKxN,UAAU,mBACCxB,IAAXgP,GAAwB,kBAAC,GAAD,CAAchC,OAAQgC,KAEnD,yBAAKxN,UAAU,4BACX,yBAAKA,UAAU,mBACCxB,IAAXgP,GAAwB,kBAAC1B,GAAD,CAAeC,WAAYyB,KAExD,yBAAKxN,UAAU,mBACDxB,IAAT8O,GAAsB,kBAAClB,GAAD,CAAUZ,OAAQ8B,KAE7C,yBAAKtN,UAAU,mBACCxB,IAAXgP,GAAwB,kBAACb,GAAD,CAAMnB,OAAQoD,MAG/C,yBAAK7L,IAAI,IAAI/C,UAAU,cACnB,kBAAC,IAAWC,MAAZ,CAAkBwL,MAAO,GAAzB,gHACUjN,IAAT8O,GACG,kBAAC,KAAD,CAAW0B,WAAW,EAClB9O,IAAKb,KAAK4P,WAA0BzQ,IAApB8O,EAAK4B,WAA2B5B,EAAK4B,WAAa,CAAEC,KAAM,UCxGvF,SAASC,KACpB,IAAMpL,EAAQ,CAAE+K,KAAMhK,KAAUsK,KAAM,GAAIC,YAAa,IAWvD,OACI,kBAAC,IAAM/N,SAAP,KACI,kBAAC,IAAD,CACIvB,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,wFACN6G,SAAS,0FAEb,6BACI,kBAAC,IAAD,CACIzC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,OAAO,aACPE,KAAK,UAEL,kBAAC,IAAKjH,KAAN,CAAWkH,MAAM,sGACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAIL,EAAM3D,KAAOgE,EAAMC,OAAOD,UAExD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,iCACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAIL,EAAMqL,KAAOhL,EAAMC,OAAOD,UAExD,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,sEACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAIL,EAAMsL,YAAcjL,EAAMC,OAAOD,UAE/D,kBAAC,IAAK7D,KAAN,KACI,kBAAC,IAAD,CAAQmI,MAAM,UAAU1B,QAvC3B,WPLd,IAAoBsI,KOMRvL,EPLfvE,QAAQC,IAAI6P,GACL7N,EAAOzD,SACT0D,KAAKD,EAAOrD,YAAakR,GACzB3N,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SOETF,MAAK,WACnBmF,KAAaC,KAAK,CACdrG,QAAS,2GACTsG,QAAS,oBAmCD,2DAEA,kBAAC,IAAD,6DC7CT,SAAUuI,KACrB,OACI,kBAAC,IAAMjO,SAAP,M,ICCAyI,GAAWC,KAAXD,OAIFE,GAAa,SAACC,EAAMC,EAAQvK,EAAQwK,GAEtC,OACI,kBAAC,IAAM9I,SAAP,KAGI,kBAAC,IAAD,CAAQ0F,QAAS,WCRtB,IAAoBwI,KDSArF,EAAO5E,GCRvB9D,EAAOxD,SAASyD,KAAKD,EAAOpD,YAAcmR,GAAQ7N,MAAK,SAACgE,GAAD,OAASA,EAAI9D,SDQzCF,MAAK,kBAAMmF,KAAaC,KAAK,CAC/CrG,QAAS,2JACTsG,QAAS,kBAETrF,MACA,kBAAM/B,GAAQwK,QANtB,gDAeG,SAASqF,KAAa,IAAD,EACQvO,IAAMC,SAAS,IADvB,mBACzBuJ,EADyB,KACTC,EADS,OAEEzJ,IAAMC,UAAS,GAFjB,mBAEzByJ,EAFyB,KAEdC,EAFc,KAUhC,OAPA3J,IAAMG,WAAU,WCpBTI,EAAOxD,SAASyB,IAAI+B,EAAOvD,UAAUyD,MAAK,SAACgE,GAAD,OAASA,EAAI9D,QDqB3CF,MAAK,SAAAE,GAChBrC,QAAQC,IAAIoC,GACZ8I,EAAc9I,QAEnB,CAAC+I,IAGA,kBAAC,IAAMtJ,SAAP,KACI,kBAAC,IAAD,CACIvB,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,wHAEX,kBAAC,KAAD,CAAO+H,WAAYJ,EAAgB3K,UAAU,eACxC,kBAAC,GAAD,CAAQgD,MAAM,8EAAkBgI,UAAU,KAAKjI,IAAI,OACnD,kBAAC,GAAD,CAAQC,MAAM,2EAAegI,UAAU,WAAWjI,IAAI,aACtD,kBAAC,GAAD,CAAQC,MAAM,wFAAkBgI,UAAU,cAAcjI,IAAI,gBAC5D,kBAAC,GAAD,CACIC,MAAM,mDACND,IAAI,SACJkI,OAAQ,SAACd,EAAMC,GAAP,OAAkBF,GAAWC,EAAMC,EAAQU,EAAcD,QEatE8E,OAjEf,WAAuB,IAAD,EACcxO,IAAMC,SAAS,CAAEwO,SAAU,GAAIC,SAAU,GAAIC,YAAa,IADxE,mBACX5Q,EADW,KACD6Q,EADC,KAqBlB,OACI,6BACI,kBAAC,IAAD,CACI/P,UAAU,mBACV4J,OAAQ,kBAAM,MACd5G,MAAM,wIACN6G,SAAS,0IAEb,kBAAC,IAAD,CACA9J,SA1Ba,iBAAM,EDHJuI,ECIRpJ,EDHRwC,EAAOxD,SAASyD,KAAKD,EAAOrD,YAAaiK,GAAM1G,MAAK,SAACgE,GAAD,OAASA,EAAI9D,SCG/CF,MAAK,WACtBmF,KAAaC,KAAK,CACdrG,QAAS,4JACTsG,QAAS,kBAIdC,OAAM,WACLH,KAAaC,KAAK,CACdrG,QAAS,kKACTsG,QAAS,mBDdlB,IAAoBqB,GC8BXlB,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,OAAO,aACP3E,MAAO,CAAE4E,QAAS,eAElBC,KAAK,UAGL,kBAAC,IAAKjH,KAAN,CAAWkH,MAAM,+FACb,kBAAC,IAAD,CAAOtD,SAAU,SAAAC,GAAK,OAAI0L,EAAY,eAAK7Q,EAAN,CAAgB0Q,SAAUvL,EAAMC,OAAOD,aAEhF,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,wCACb,kBAAC,IAAD,CAAO1G,KAAK,WAAWoD,SAAU,SAAAC,GAAK,OAAI0L,EAAY,eAAK7Q,EAAN,CAAgB2Q,SAAUxL,EAAMC,OAAOD,aAEhG,kBAAC,IAAK7D,KAAN,CAAWkH,MAAM,yFACb,kBAAC,KAAD,CAAa9E,MAAO,CAAEJ,MAAO,SAAW1B,YAAY,wFAAkBsD,SAAU,SAAAC,QAC9D7F,IAAV6F,GACA0L,EAAY,eAAK7Q,EAAN,CAAgB4Q,YAAazL,SAIpD,kBAAC,IAAK7D,KAAN,KACI,kBAAC,IAAD,CAAQQ,KAAK,UAAUC,SAAS,SAASjB,UAAU,qBAAnD,iI,qBC7CLgQ,OAZf,WAAsB,IAAD,EACK7O,IAAMC,WADX,mBACV6O,EADU,KACLC,EADK,KAKjB,OAHA/O,IAAMG,WAAU,WCDTzD,IAAM8B,IAAI,4EAA4EiC,MAAK,SAAAgE,GAAG,OAAIA,EAAI9D,QDEhGF,MAAK,SAAAuO,GAAE,OAAID,EAAOC,SAG3B,yBAAKnQ,UAAU,iCACX,kBAAC,KAAD,CAAewL,OAAQyE,MEOpB,SAASG,GAAT,GAA+B,IAAV9S,EAAS,EAATA,MAEhC,OADAmC,QAAQC,IAAIpC,GAER,kBAAC,IAAMiE,SAAP,KAEI,kBAAC,IAAD,KAEI,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAQqB,MAAO,CAAE4E,QAAS,gBACtB,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAO6I,KAAI,UAAK/S,EAAM+S,KAAX,aAA4BC,UAAW3G,KAClD,kBAAC,IAAD,CAAO0G,KAAI,UAAK/S,EAAM+S,KAAX,SACP,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAI,UAAK/S,EAAM+S,KAAX,gBACP,kBAACX,GAAD,OAEJ,kBAAC,IAAD,CAAOW,KAAI,UAAK/S,EAAM+S,KAAX,eACP,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAI,UAAK/S,EAAM+S,KAAX,eACP,kBAAC3F,GAAD,OAEJ,kBAAC,IAAD,CAAO2F,KAAI,UAAK/S,EAAM+S,KAAX,qBACP,kBAACjD,GAAD,OAEJ,kBAAC,IAAD,CAAOiD,KAAI,UAAK/S,EAAM+S,KAAX,eACP,kBAACjF,GAAD,OAEJ,kBAAC,IAAD,CAAOiF,KAAI,UAAK/S,EAAM+S,KAAX,cACP,kBAACjB,GAAD,OAEJ,kBAAC,IAAD,CAAOiB,KAAI,UAAK/S,EAAM+S,KAAX,qBACP,kBAACb,GAAD,W,8BC7CpBe,GAAWjO,IAAXiO,OACFC,GACF,kBAAC,IAAD,KACI,kBAAC,IAAKhQ,KAAN,KACI,kBAAC,IAAD,CAAM0B,GAAI,WAAV,kGASSuO,GAFpBC,YAAO,Y,IACPC,Y,0KAEa,IACE5R,EAAcC,KAAK4R,MAAnB7R,UAER,OADAU,QAAQC,IAAImR,YAAI,OAAC9R,QAAD,IAACA,OAAD,EAACA,EAAW+R,eAExB,kBAACP,GAAD,CAAQvQ,UAAU,UACd,yBAAKA,UAAU,kBACX,yBAAKE,IAAKC,IAAMC,IAAI,KACpB,yBAAKJ,UAAU,QAAf,aAIM,OAATjB,QAAS,IAATA,OAAA,EAAAA,EAAW+R,eAAiB,yBAAK9Q,UAAU,WACxC,kBAAC,KAAD,CAAU+Q,QAASP,IACf,yBAAKxQ,UAAU,oBAAoBiH,QAAS,SAAAzC,GAAC,OAAIA,EAAEwM,mBAAnD,8CACY,kBAACC,GAAA,EAAD,c,GAfK9P,IAAM+P,a,QCN1BC,IALD/O,IAAZD,QAC2BG,IAA3BiO,OAA2BjO,IAAnB8O,QAAmB9O,IAAVD,MAExBqO,YAAO,Y,IACPC,Y,qLAEsB,IACX5R,EAAcC,KAAK4R,MAAnB7R,WACJ,OAACA,QAAD,IAACA,OAAD,EAACA,EAAW+R,eACL,OAAT/R,QAAS,IAATA,KAAWkD,c,+BAIL,IACAlD,EAAcC,KAAK4R,MAAnB7R,UAOR,OANAU,QAAQC,IAAR,OAAYX,QAAZ,IAAYA,OAAZ,EAAYA,EAAW+R,eACvB,OAAI/R,QAAJ,IAAIA,OAAJ,EAAIA,EAAW+R,gBACJ,OAAT/R,QAAS,IAATA,KAAWkD,aAKX,kBAAC,IAAD,CAAQjC,UAAU,WAChB,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAajB,UAAWA,IAExB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsR,KAAK,UAAUpF,OAAQ,WAE5B,OADS,OAATlM,QAAS,IAATA,KAAWsS,SACJ,kBAAC,IAAD,CAAUnP,GAAI,SAEvB,kBAAC,IAAD,CAAOoP,QAAQ,EAAMC,OAAK,EAAClB,KAAK,KAC9B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aAAapF,OAAQmF,KACjC,kBAAC,IAAD,CAAOC,KAAK,IAAIpF,OAAQ,kBAAM,kBAAC,IAAD,CAC5BpG,OAAO,MACP7B,MAAM,MACN6G,SAAS,+HACT2H,MAAO,kBAAC,IAAD,CAAMtP,GAAI,cAAV,sG,GAnCef,IAAM+P,a,SCC7BO,OAZf,WAEI,OACI,oCACI,kBAAC,IAAD,CAAU1S,UAAWA,GACjB,kBAAC,GAAD,S,cCHhB2S,IAASzG,OAAO,kBAAC,GAAD,MAAU0G,SAASC,eAAe,SpC6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnQ,MAAK,SAAAoQ,GACJA,EAAaC,gBAEd/K,OAAM,SAAAgL,GACLzS,QAAQyS,MAAMA,EAAMvR,c","file":"static/js/main.5d78ba45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cdef68cc.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nconst API_HOST = `http://localhost:7700/api`;\n\nfunction GetHeaders() {\n    return {\n        'Access-Control-Allow-Origin': '*',\n        \"Content-Type\": \"application/json\",\n        \"Token\": sessionStorage.getItem('token')\n    }\n}\n\nexport default {\n    API_HOST,\n    GET_HEADERS: GetHeaders,\n    TEST_API: axios.create({ baseURL: `${API_HOST}/test/`, headers: GetHeaders() }),\n    NODE_API: axios.create({ baseURL: `${API_HOST}/node/`, headers: GetHeaders() }),\n    AUTH_API: axios.create({ baseURL: `${API_HOST}/user/`, headers: GetHeaders() }),\n\n    GET_LIST: '/list',\n    GET_BY_ID: '/get/',\n    POST_CREATE: '/create',\n    POST_REMOVE: '/remove/',\n\n}","import apiUrl from './consts';\nimport { observable } from 'mobx';\n\n\nexport function register({ authData }) {\n\n    return apiUrl.AUTH_API\n        .post('/register', authData)\n        .then(response => response.data)\n\n}\n\nexport function login({ authData }) {\n    return apiUrl.AUTH_API\n        .post('/login', authData)\n        .then(response => {\n            localStorage.setItem('user', JSON.stringify(authData))\n            return response.data\n        })\n\n}\nexport function get_token(authData) {\n    console.log(authData)\n    return apiUrl.AUTH_API\n        .post('/auth', authData)\n        .then(response => response.data)\n}\n\nexport function saveToken(token) {\n    authControl.set(token)\n    sessionStorage.setItem('token', token);\n    console.log(sessionStorage.getItem('token'))\n}\nexport function removeToken() {\n    sessionStorage.removeItem('token');\n}\nexport function getSessionToken() {\n    const token = sessionStorage.getItem('token');\n    if (token !== null && token !== undefined && token.length > 0 && token !== \"\") {\n        return token\n    }\n    return undefined\n\n}\nexport function checkToken() {\n    if (getSessionToken() !== undefined) {\n        return true\n    }\n    return false;\n}\n\nexport const authControl = observable.box(checkToken());","import { computed, observable, action, IObservableValue } from 'mobx'\nimport { checkToken, removeToken } from '../helpers/auth.service';\n\n\nexport class AuthStore {\n    @observable authState: IObservableValue<boolean>;\n\n    constructor() {\n        this.authState = observable.box(false);\n    }\n\n    @computed get getAuthState() {\n        return this.authState.get();\n    }\n    @action saveData(userData) {\n        localStorage.setItem('user', JSON.stringify(userData))\n    }\n\n    @action authorize() {\n        this.authState.set(checkToken())\n    }\n    @action logout() {\n        removeToken();\n        console.log('logout')\n\n        this.authState.set(false);\n    }\n}\n\n\nexport const authStore = new AuthStore();","import React from 'react'\nimport { Form, Input, Button, Checkbox, Card, Typography } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n} from \"react-router-dom\";\nimport logo from '../../assets/images/logo.png'\nimport { get_token, saveToken, checkToken } from '../../helpers/auth.service';\nimport { authStore } from \"../../store/authStore\";\n\nconst Login = ({ onFinish }) => (\n    <div className=\"login-page\">\n        <Card className=\"card-form\">\n            <Typography.Title>Вход в систему </Typography.Title>\n            <img src={logo} alt=\"\" />\n            <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n\n            >\n                <Form.Item\n                    name=\"Username\"\n                    rules={[{ required: true, message: 'Введите имя пользователя' }]}\n                >\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                </Form.Item>\n                <Form.Item\n                    name=\"Password\"\n                    rules={[{ required: true, message: 'Введите пароль пользователя' }]}\n                >\n                    <Input\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                        type=\"password\"\n                        placeholder=\"Password\"\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Войти</Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    </div>);\n\n\nfunction LoginPage() {\n    const [token, setToken] = React.useState(checkToken());\n    const onFinish = values => {\n        console.log(values);\n        get_token(values)\n            .then(({ Token }) => {\n                saveToken(Token);\n                authStore.authorize();\n                setToken(checkToken())\n            })\n    };\n    React.useEffect(() => {\n        console.log('token changed')\n    }, [token])\n    return (\n        <React.Fragment>\n            {token === false ? <Login onFinish={onFinish} /> : <Redirect to=\"/dashboard\" />}\n        </React.Fragment>\n\n    )\n}\n\nexport default LoginPage\n","import React from 'react'\nimport SubnodeOutlined from \"@ant-design/icons/lib/icons/SubnodeOutlined\";\nimport UngroupOutlined from \"@ant-design/icons/lib/icons/UngroupOutlined\";\nimport UserSwitchOutlined from \"@ant-design/icons/lib/icons/UserSwitchOutlined\";\nimport { Layout, Menu } from 'antd';\nimport { Link } from \"react-router-dom\";\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\nfunction Sidebar() {\n    return (\n        <>\n            <Sider width={200} className=\"site-layout-background\">\n                <Menu\n                    mode=\"inline\"\n                    defaultSelectedKeys={['1']}\n                    defaultOpenKeys={['sub1']}\n                    style={{ height: '100%', borderRight: 0 }}\n                >\n                    <SubMenu\n                        key=\"sub1\"\n                        title={\n                            <span>\n                                <SubnodeOutlined />\n                               Тестирование\n                              </span>\n                        }\n                    >\n                        <Menu.Item key=\"5\"><Link to=\"/dashboard/test/add\">Новый тест</Link></Menu.Item>\n                        <Menu.Item key=\"2\"><Link to=\"/dashboard/test/list\">История </Link></Menu.Item>\n                    </SubMenu>\n                    <SubMenu\n                        key=\"sub3\"\n                        title={\n                            <span>\n                                <UngroupOutlined />\n                               Узлы системы\n                              </span>\n                        }\n                    >\n                        <Menu.Item key=\"7\"><Link to=\"/dashboard/node/add\">Добавить узел</Link></Menu.Item>\n                        <Menu.Item key=\"10\"><Link to=\"/dashboard/node/list\">Узлы</Link></Menu.Item>\n\n                    </SubMenu>\n                    <SubMenu\n                        key=\"sub2\"\n                        title={\n                            <span>\n                                <UserSwitchOutlined />\n                         Пользователи\n                          </span>\n                        }\n                    >\n                        <Menu.Item key=\"7\"><Link to=\"/dashboard/users/add\">Добавить </Link></Menu.Item>\n                        <Menu.Item key=\"110\"><Link to=\"/dashboard/users/list\">Список </Link></Menu.Item>\n\n                    </SubMenu>\n                </Menu>\n            </Sider>\n        </>\n    )\n}\n\nexport default Sidebar\n","/**\n *\n */\n\nexport class ConfigModel {\n\n    constructor() {\n        this.config = {\n\n            \"site-setup\": { schedules: [], helpers: {} },\n\n        }\n    }\n    addCore(core) {\n        this.config = { ...this.config, ...core, }\n    }\n\n\n    /**\n     *\n     * @param schedule\n     */\n    addSchedule(schedule) {\n        this.config['site-setup'].schedules.push(schedule)\n    }\n\n\n    /**\n     *\n     * @param agent\n     */\n    addSshAgent(agent) {\n        this.config[\"site-setup\"].helpers = { \"ssh-agent\": agent }\n    }\n\n}","import React, { useEffect } from \"react\";\nimport { Input, InputNumber, Select } from \"antd\";\n\n\nexport default function StepLoad({ getData }) {\n    const [model, setModel] = React.useState({ start: 0, end: 0, step: 0, duration: \"10\", fix: 's' })\n    React.useEffect(() => getData(model));\n    const selection = () => {\n        return (\n            <Select onChange={(e) => setModel({ ...model, fix: e })} defaultValue=\"s\"\n                className=\"select-after\">\n                <Select.Option value=\"s\">с.</Select.Option>\n                <Select.Option value=\"m\">мин.</Select.Option>\n                <Select.Option value=\"h\">ч.</Select.Option>\n                <Select.Option value=\"d\">д.</Select.Option>\n            </Select>\n        )\n    }\n    return (\n\n        <React.Fragment>\n\n            <Input.Group compact>\n                <InputNumber\n                    onChange={value => {\n                        if (value !== undefined) {\n                            setModel({ ...model, start: value })\n\n                        }\n\n                    }}\n                    style={{ width: \"200px\" }}\n                    placeholder=\"Начальная нагрузка RPS\"\n                />\n                <InputNumber\n                    onChange={value => {\n                        if (value)\n                            setModel({ ...model, end: value })\n\n                    }}\n                    style={{ width: \"200px\" }}\n                    placeholder=\"Конечная нагрузка RPS\"\n                />\n                <InputNumber\n                    onChange={value => {\n                        if (value)\n                            setModel({ ...model, step: value })\n\n                    }}\n                    style={{ width: \"200px\" }}\n                    placeholder=\"Шаг нагрузки RPS\"\n                />\n                <Input\n                    onChange={value => {\n                        setModel({ ...model, duration: value.target.value })\n                    }}\n                    style={{ width: \"200px\" }}\n                    addonAfter={selection()}\n                    defaultValue=\"1\"\n                />\n            </Input.Group>\n        </React.Fragment>\n    )\n}\n","import React from \"react\";\nimport {Input, InputNumber, Select} from \"antd\";\n\n\nexport default function ExpLoad({getData}) {\n    const [model, setModel] = React.useState({value: 0, duration: \"9\", fix: ''})\n    React.useEffect(() => getData(model));\n    const selection = () => {\n        return (\n            <Select onChange={(e) => setModel({...model, fix: e})} defaultValue=\"s\"\n                    className=\"select-after\">\n                <Select.Option value=\"s\">с.</Select.Option>\n                <Select.Option value=\"m\">мин.</Select.Option>\n                <Select.Option value=\"h\">ч.</Select.Option>\n                <Select.Option value=\"d\">д.</Select.Option>\n            </Select>\n        )\n    }\n    return (\n        <React.Fragment>\n\n            <Input.Group compact>\n                <InputNumber style={{width: \"200px\"}} placeholder=\"Значение нагрузки RPS\" onChange={value => {\n                    if(value!==undefined){\n                        setModel({...model, value: value})\n                    }\n                }}/>\n                <Input style={{width: \"200px\"}} addonAfter={selection()} defaultValue=\"1\" onChange={value => {\n                    setModel({...model, duration: value.target.value})\n                }}/>\n            </Input.Group>\n        </React.Fragment>\n    )\n}\n","import React from \"react\";\nimport {Checkbox} from \"antd\";\n\nexport default function Performance({getData}) {\n    const [model, setModel] = React.useState({status:false})\n    React.useEffect(() => getData(model));\n    return (\n        <React.Fragment>\n            <Checkbox onChange={(value) => {\n                setModel({status: value.target.value})\n            }}>Статус</Checkbox>\n        </React.Fragment>\n    )\n}\n","import React from \"react\";\nimport {Input, InputNumber, Select} from \"antd\";\n\n\nexport default function ConstLoad({getData}) {\n    const [model, setModel] = React.useState({value: 0, duration: \"1\", fix: ''});\n    React.useEffect(() => getData(model));\n    const selection = () => {\n        return (\n            <Select onChange={(e) => setModel({...model, fix: e})} defaultValue=\"s\"\n                    className=\"select-after\">\n                <Select.Option value=\"s\">с.</Select.Option>\n                <Select.Option value=\"m\">мин.</Select.Option>\n                <Select.Option value=\"h\">ч.</Select.Option>\n                <Select.Option value=\"d\">д.</Select.Option>\n            </Select>\n        )\n    }\n    return (\n        <React.Fragment>\n\n            <Input.Group compact>\n                <InputNumber\n                    style={{width: \"200px\"}}\n                    placeholder=\"Значение нагрузки RPS\"\n                    onChange={value => {\n                        if(value!==undefined){\n                            setModel({...model, value: value})\n                        }\n                    }}/>\n                <Input\n                    style={{width: \"200px\"}}\n                    addonAfter={selection()}\n                    defaultValue=\"1\"\n                    onChange={value => {\n                        setModel({...model, duration: value.target.value})\n\n                    }}\n                />\n            </Input.Group>\n        </React.Fragment>\n    )\n}\n","export default function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        // eslint-disable-next-line no-mixed-operators\n        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}","import apiUrl from './consts';\n\n/**\n * Создание теста\n * @param testConfig конфигурация тестирования\n */\nexport function createTest(testConfig) {\n    console.log(testConfig);\n    return apiUrl.TEST_API\n        .post(apiUrl.POST_CREATE, testConfig)\n        .then(response => response.data)\n\n}\n/**\n * \n * @param file \n */\nexport function uploadFile(file: Blob) {\n    const data = new FormData();\n    data.append(\"file\", file);\n    return apiUrl.TEST_API.post('/upload', data, {\n        headers: {\n            'Content-Type': 'form/data'\n        }\n    }).then(res => res.data)\n}\n\nexport function createAndRun(testConfig) {\n    return apiUrl.TEST_API\n        .post(apiUrl.POST_CREATE, testConfig)\n        .then(response => response.data)\n        .then((model) => startTest(model))\n}\n\n\nexport function startTest(testRecord) {\n    console.log(JSON.stringify(testRecord));\n\n    return apiUrl.TEST_API\n        .post(`/run/${testRecord.ID}`)\n        .then(response => response.data)\n\n}\nexport function stopTest(testRecord) {\n    console.log(JSON.stringify(testRecord));\n\n    return apiUrl.TEST_API\n        .post(`/stop/${testRecord.ID}`)\n        .then(response => response.data)\n\n}\n\nexport function removeTest(testId) {\n\n    return apiUrl.TEST_API\n        .post(apiUrl.POST_REMOVE + testId)\n        .then(response => response.data)\n}\n\nexport function getListTest() {\n    return apiUrl.TEST_API\n        .get(apiUrl.GET_LIST)\n        .then(resp => {\n\n            console.log(resp);\n            return resp.data;\n        })\n        .then(res => {\n            if (res && res !== 'Token is expired' && res.length > 0) {\n                return res.map(item => ({ ...item, key: item.ID }));\n            }\n        })\n}\n\n/**\n * @return {string}\n */\nexport function QueryString(target, host, start, end) {\n    return `/series/?table=gun-metrics&target=${target}&start=2020-04-11T10:50:52.9462237Z&end=2020-04-11T10:51:32.6597553Z`\n}\n\n\nexport function getSeries(id) {\n    return apiUrl.TEST_API\n        .get('/series/' + id)\n        .then(resp => {\n            console.log(resp.data);\n            return resp;\n        }).then(res => res.data)\n}\n\n/**\n *\n * @param {string} id\n */\nexport function getTestById(id) {\n    return apiUrl.TEST_API\n        .get(apiUrl.GET_BY_ID + id)\n        .then(resp => {\n            console.log(resp.data);\n            return resp;\n        }).then(res => res.data)\n}","import React, { useEffect } from 'react';\nimport { Button, Collapse, Form, Input, InputNumber, Select } from \"antd\";\nimport { ConfigModel } from \"../../models/ConfigModel\";\nimport StepLoad from \"./StepLoad\";\nimport ExpLoad from \"./ExpLoad\";\nimport Performance from \"./Performance\";\nimport ConstLoad from \"./ConstLoad\";\nimport uuidv4 from \"../../helpers/uuid\";\nimport { createAndRun, createTest } from \"../../helpers/test.service\";\nimport { notification } from 'antd';\n\nexport default function TestCreate() {\n    const [core, setCore] = React.useState({ name: '', \"server-host\": \"\" })\n\n    const [status, setStatus] = React.useState(\"step-load\");\n    /**\n     * Algorithm of configuration\n     */\n    const [config, setConfig] = React.useState<any>();\n    /**\n     * Testing Routes\n     */\n    const [routes, addRoute] = React.useState<any[]>([]);\n\n    const [agent, setAgent] = React.useState<any>({});\n\n    useEffect(() => console.log(agent), [agent]);\n\n    /**\n     * Get all data\n     * @param config\n     */\n    const getAllData = (config) =>\n        setConfig(config);\n\n    /**\n     * Export configuration\n     * @param e Event\n     */\n    const exportConfig = (typeCreate) => {\n        const conf = new ConfigModel();\n        const shed = { routing: [...routes] };\n        console.log(config)\n        config.duration = config.duration + config.fix;\n        shed[status] = config;\n\n        conf.addCore(core);\n        conf.addSchedule(shed);\n\n        conf.addSshAgent(agent);\n        if (typeCreate) {\n            createTest(conf.config).then(() => {\n                notification.open({\n                    message: 'Тест создан успешно',\n                    onClick: () => {\n\n                    },\n                });\n            }).catch(() => {\n                notification.open({\n                    message: 'Ошибка создания теста',\n                    onClick: () => {\n\n                    },\n                });\n            })\n        } else {\n            createAndRun(conf.config).then(() => {\n                notification.open({\n                    message: 'Тест запущен успешно',\n                    onClick: () => {\n\n                    },\n                });\n            }).catch(() => {\n                notification.open({\n                    message: 'Ошибка запуска теста',\n                    onClick: () => {\n\n                    },\n                });\n            })\n        }\n\n    };\n\n    useEffect(() => console.log(config), [config]);\n    /**\n     * Render Children Algorithms\n     * @param cfg\n     * @returns {*}\n     */\n    const renderChildren = () => {\n        switch (status) {\n            case \"step-load\":\n                return <StepLoad getData={getAllData} />;\n            case \"exp-load\":\n                return <ExpLoad getData={getAllData} />;\n            case \"performance-load\":\n                return <Performance getData={getAllData} />;\n            default:\n                return <ConstLoad getData={getAllData} />;\n        }\n    };\n\n    // @ts-ignore\n    return (\n\n\n        <Form\n            labelCol={{\n                span: 4,\n            }}\n            wrapperCol={{\n                span: 14,\n            }}\n            layout=\"horizontal\"\n            style={{ padding: '0 24px 24px' }}\n\n            size=\"middle\"\n        >\n\n            <Form.Item label=\"Наименование теста\">\n                <Input onChange={value => setCore({ ...core, name: value.target.value })} />\n            </Form.Item>\n            <Form.Item label=\"Тестируемый Сервер\">\n                <Input onChange={value => setCore({ ...core, \"server-host\": value.target.value })}\n                    placeholder=\"http://localhost:3030/\" />\n            </Form.Item>\n            <Form.Item label=\"Пути тестирования\">\n\n                <Collapse accordion>\n                    <Collapse.Panel header=\"Пути тестирования\" key=\"1\">\n                        <Button style={{ margin: \"20px\" }} type=\"primary\"\n                            onClick={e => addRoute([...routes, {\n                                url: \"\",\n                                \"requestType\": \"GET\",\n                                \"statusCode\": 200\n                            }])}>\n                            Добавить путь\n                        </Button>\n\n                        {routes && routes.map((route, idx) =>\n                            <Form.Item key={uuidv4()} label={idx + 1}>\n                                <Input\n\n                                    placeholder=\"http://localhost:3030/\"\n                                    defaultValue={route.url}\n                                    onChange={e => {\n                                        route.url = e.target.value\n                                    }} />\n                            </Form.Item>\n                        )}\n\n                    </Collapse.Panel>\n\n                </Collapse>\n            </Form.Item>\n\n\n            <Form.Item label=\"Алгоритм тестирования\">\n                <Select defaultValue=\"step-load\" onChange={value => setStatus(value)}>\n                    <Select.Option value=\"step-load\">Линейная нагрузка</Select.Option>\n                    <Select.Option value=\"const-load\">Константная</Select.Option>\n                    <Select.Option value=\"exp-load\">Экспоненциальная нагрузка</Select.Option>\n                    <Select.Option value=\"performance-load\">Максимальная нагрузка</Select.Option>\n                    <Select.Option value=\"const-load\">Стресс нагрузка</Select.Option>\n\n                </Select>\n            </Form.Item>\n            <Form.Item label=\"Конфигурация алгоритма\">\n                {renderChildren()}\n            </Form.Item>\n            <Form.Item label=\"Агенты тестирования\">\n                <Collapse accordion>\n                    <Collapse.Panel header=\"Агенты тестирования\" key=\"1\">\n                        <Form\n                            labelCol={{\n                                span: 4,\n                            }}\n                            wrapperCol={{\n                                span: 14,\n                            }}\n                            layout=\"horizontal\"\n\n\n                            size=\"middle\"\n                        >\n                            <Form.Item label=\"Хост\">\n                                <Input value={agent.host} onChange={event => {\n                                    setAgent({ ...agent, host: event.target.value })\n                                }} />\n                            </Form.Item>\n                            <Form.Item label=\"Пользователь\">\n                                <Input value={agent.user} onChange={event => {\n                                    setAgent({ ...agent, user: event.target.value })\n                                }} />\n                            </Form.Item>\n                            <Form.Item label=\"Порт\">\n                                <InputNumber min={1} onChange={value => {\n                                    setAgent({ ...agent, port: value })\n                                }} />\n                            </Form.Item>\n                            <Form.Item label=\"Пароль\">\n                                <Input onChange={event => {\n                                    setAgent({ ...agent, password: event.target.value })\n                                }} />\n                            </Form.Item>\n                            <Form.Item label=\"Публичный ключ\">\n                                <Input onChange={event => {\n                                    setAgent({ ...agent, keyauth: event.target.value })\n                                }} />\n                            </Form.Item>\n                        </Form>\n                    </Collapse.Panel>\n                </Collapse>\n            </Form.Item>\n            <Form.Item className=\"action-buttons\">\n                <Button color=\"primary\" onClick={() => exportConfig(false)}>Сохранить и запустить</Button>\n                <Button onClick={() => exportConfig(true)}>Сохранить</Button>\n            </Form.Item>\n        </Form>\n\n    )\n}","import React from 'react'\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { Button, Collapse, Form, Input, InputNumber, Select, notification } from \"antd\";\r\nimport { uploadFile } from '../../helpers/test.service';\r\nconst { Dragger } = Upload;\r\n\r\nfunction UploadTest() {\r\n    const [file, loadFile] = React.useState<any>();\r\n    const sendFile = () => {\r\n        uploadFile(file).then(item => notification.open({\r\n            message: 'Тест создан успешно',\r\n            onClick: () => {\r\n\r\n            },\r\n        }))\r\n    }\r\n    return (\r\n        <div>\r\n            <Dragger\r\n                name=\"file\"\r\n                multiple={false}\r\n                onChange={info => {\r\n                    loadFile(info.file);\r\n                }}\r\n            >\r\n                <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                </p>\r\n                <p className=\"ant-upload-text\">Вставьте YAML файл конфигурации тестирования</p>\r\n               \r\n            </Dragger>\r\n            <Form.Item className=\"action-buttons\">\r\n\r\n                <Button onClick={() => sendFile()}>Сохранить</Button>\r\n                <Button >Отменить</Button>\r\n            </Form.Item>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadTest\r\n","import React from 'react';\nimport {\n    PageHeader, Tabs, Radio\n} from 'antd';\nimport TestCreate from \"../../components/Test/TestCreate\";\nimport UploadTest from '../../components/Test/UploadTest';\n\nconst { TabPane } = Tabs;\nexport default function AddTest() {\n    return (\n        <React.Fragment>\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={() => null}\n                title=\"Создание нагрузочного теста\"\n                subTitle=\"Создание теста\"\n            />\n            <div>\n                <Tabs defaultActiveKey=\"1\" type=\"card\" >\n                    <TabPane tab=\"Создание теста\" key=\"1\">\n                        <TestCreate />\n                    </TabPane>\n                    <TabPane tab=\"Загрузка файла\" key=\"2\">\n                        <UploadTest />\n                    </TabPane>\n                  \n                </Tabs>\n            </div>\n\n        </React.Fragment>\n    )\n\n}\n","import React from 'react';\nimport { Button, PageHeader, Table } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { getListTest, removeTest, startTest, stopTest } from \"../../helpers/test.service\";\nimport { notification } from 'antd';\n\nconst { Column } = Table;\n\n\nconst testAction = (text, record, action, removeState) => {\n\n    return (\n        <React.Fragment>\n            <Link to={`/dashboard/test/detail/${record.ID}`}>Выбрать</Link>\n            &nbsp;&nbsp;  &nbsp;&nbsp;\n            <Button onClick={() => {\n                const stat = (record.Status === 'active' ? 'Остановлен' : 'Запущен');\n                if (record.Status !== 'active') {\n                    startTest(record).then(() => notification.open({\n                        message: `Тест ${stat}  успешно`,\n\n                    })).then(\n                        () => action(!removeState)\n                    ).catch(err => notification.open({\n                        message: `Тест не успешно ${stat} ` + +err.message,\n\n                    }));\n                } else {\n                    stopTest(record).then(() => notification.open({\n                        message: `Тест ${stat}  успешно`,\n                    })).then(\n                        () => action(!removeState)\n                    ).catch(err => notification.open({\n                        message: `Тест не успешно ${stat} ` + +err.message,\n                    }));\n\n                }\n\n            }}>{record.Status === 'active' ? 'Остановить' : 'Запустить'}</Button>\n            &nbsp;&nbsp;  &nbsp;&nbsp;\n            <Button onClick={() => {\n                removeTest(record.ID).then(() => notification.open({\n                    message: 'Тест удален успешно',\n                    onClick: () => {\n                    },\n                })).then(\n                    () => action(!removeState)\n                );\n            }}>Удалить</Button>\n        </React.Fragment>\n    )\n};\n\nexport default function ViewTests() {\n    const [testCollection, setCollection] = React.useState([]);\n    const [needFetch, setNeedFetch] = React.useState(true);\n    React.useEffect(() => {\n        getListTest().then(data => {\n            console.log('update data')\n            setCollection(data);\n           \n        })\n    }, [needFetch]);\n\n    return (\n        <React.Fragment>\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={() => null}\n                title=\"История тестирования\"\n            />\n            <Table dataSource={testCollection} className=\"shadow-flex\">\n                <Column title=\"# Теста\" dataIndex=\"ID\" key=\"ID\" />\n                <Column title=\"Наименование\" dataIndex=\"Name\" key=\"Name\" />\n                <Column title=\"Таргет сервер\" dataIndex=\"Target\" key=\"Target\" />\n                <Column title=\"Алгоритм\" dataIndex=\"Algorithm\" key=\"Algorithm\" />\n                <Column title=\"Статус теста\" dataIndex=\"Status\" key=\"Status\" />\n                <Column\n                    title=\"Действия\"\n                    key=\"action\"\n                    render={(text, record) => testAction(text, record, setNeedFetch, needFetch)}\n                />\n            </Table>\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport { notification, PageHeader, Table, Tag, Button } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { getListTest, removeTest } from \"../../helpers/test.service\";\nimport { getListNode, removeNode } from \"../../helpers/node.service\";\nimport uuidv4 from \"../../helpers/uuid\";\n\nconst { Column, ColumnGroup } = Table;\n\nconst testAction = (text, record, action, updateState) => (\n    <React.Fragment>\n\n        <Button onClick={() => {\n            removeNode(record.ID).then(() => notification.open({\n                message: 'Узел удален успешно',\n                onClick: () => {\n                },\n            })).then(() => action(!updateState));\n        }} >Удалить</Button>\n    </React.Fragment>\n);\n\nexport default function ViewNodes() {\n    const [testCollection, setCollection] = React.useState([]);\n    const [isUpdated, setUpdate] = React.useState(true);\n\n    React.useEffect(() => {\n        getListNode().then(data => {\n            if (data !== 'Token is expired')\n                setCollection(data)\n        }\n        );\n    }, [isUpdated]);\n    return (\n        <React.Fragment>\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={() => null}\n                title=\"Узлы системы\"\n            />\n            <Table dataSource={testCollection} className=\"shadow-flex\">\n                <Column title=\"# Ноды\" dataIndex=\"Uuid\" key=\"Uuid\" />\n                <Column title=\"Имя ноды\" dataIndex=\"Name\" key=\"Name\" />\n                <Column title=\"URL Базы данных\" dataIndex=\"DatabaseUrl\" key=\"DatabaseUrl\" />\n                <Column\n                    title=\"Действия\"\n                    key=\"action\"\n                    render={(text, record) => testAction(text, record, setUpdate, isUpdated)}\n                />\n            </Table>\n        </React.Fragment>\n    )\n}","import apiUrl from './consts';\n\n\nexport function createNode(nodeConfig) {\n    console.log(nodeConfig);\n    return apiUrl.NODE_API\n        .post(apiUrl.POST_CREATE, nodeConfig)\n        .then(response => response.data)\n\n}\n\nexport function removeNode(id) {\n    return apiUrl.NODE_API\n        .post(apiUrl.POST_REMOVE + id)\n        .then(response => response.data)\n}\n\nexport function getListNode() {\n    return apiUrl.NODE_API\n        .post(apiUrl.GET_LIST)\n        .then(response => response.data)\n}\n\nexport function getNodeById(id) {\n    return apiUrl.NODE_API\n        .get(apiUrl.GET_BY_ID + id)\n        .then(response => response.data)\n}","import React, { useEffect } from 'react';\n\nimport { AreaChart, Area, CartesianGrid, YAxis, XAxis, Tooltip, Brush, ResponsiveContainer } from 'recharts';\nimport { Typography } from \"antd\";\n\nexport default function RpsChart({ source }) {\n    console.log(source);\n\n    return (\n        <div className=\"charts-flex\">\n            <Typography.Title level={3}>График количества запросов в секунду</Typography.Title>\n            <ResponsiveContainer>\n                <AreaChart data={source} margin={{\n                    bottom: 50,\n                }}>\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                    <Area type=\"monotone\" dataKey=\"rps\" stroke=\"#8884d8\" />\n                    <Tooltip />\n                    <Brush />\n                </AreaChart>\n            </ResponsiveContainer>\n        </div>\n\n    )\n}\n","import React, { useEffect } from 'react';\n\nimport { Typography } from \"antd\";\n\nexport default function SystemMetrics({ sysMetrics }) {\n\n    return (\n        <div className=\"info-flex\">\n            <Typography.Title level={3}>Системные метрики</Typography.Title>\n            <p><span className=\"info-span\">CpuLoad {sysMetrics.cpu}</span></p>\n            <p><span className=\"info-span\">MemoryFree {sysMetrics.free}</span></p>\n            <p><span className=\"info-span\">MemoryCached {sysMetrics.cached}</span></p>\n            <p><span className=\"info-span\">DiskLoad I/O interface {sysMetrics.disk}</span></p>\n        </div>\n\n    )\n}\n","import React, { useEffect } from 'react';\n\nimport { Tag, Typography } from \"antd\";\n\nexport default function DateInfo({ source }) {\n    const timeConvert = (date) => {\n        return new Date(date).toLocaleString()\n    }\n    return (\n        <div className=\"info-flex\">\n            <Typography.Title level={3}>Результаты тестирования</Typography.Title>\n\n            <div className=\"sub-flex\">\n                <span className=\"info-span\">Результат тестирования</span>{source.Status}\n            </div>\n\n            <div className=\"sub-flex\">\n                <span className=\"info-span\">Время начала</span> {timeConvert(source.UpdatedAt)}\n            </div>\n            <div className=\"sub-flex\">\n                <span className=\"info-span\">Время остановки</span> {timeConvert(source.EndTime)}\n            </div>\n        </div>\n\n    )\n}\n","import React, {useEffect} from 'react';\n\nimport {Typography} from \"antd\";\n\nexport default function Info({source}) {\n\n    return (\n        <div className=\"info-flex\">\n            <Typography.Title level={3}>Показатели тестирования</Typography.Title>\n            <p><span className=\"info-span\">Количество запросов в секунду</span> {source.rps}</p>\n            <p><span className=\"info-span\">Среднее время ответа</span> {source.avRes}</p>\n            <p><span className=\"info-span\">Максимальное время ответа</span> {source.minRes}</p>\n            <p><span className=\"info-span\">Минимальное время ответа</span> {source.minRes}</p>\n        </div>\n\n    )\n}\n","\r\nimport { LineChart, CartesianGrid, YAxis, XAxis, Tooltip, Legend, Line, Brush, ResponsiveContainer } from 'recharts';\r\nimport { Typography } from \"antd\";\r\n\r\n\r\n\r\nimport React from 'react'\r\n\r\nfunction DepTimeChart({ source }) {\r\n    return (\r\n        <div className=\"charts-flex\">\r\n            <Typography.Title level={3}>График зависимости количества запросов и времени ответа</Typography.Title>\r\n            <ResponsiveContainer>\r\n                <LineChart\r\n\r\n                    data={source}\r\n                    margin={{\r\n                        top: 5, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"rps\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                    <Line type=\"monotone\" dataKey=\"respTime\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DepTimeChart\r\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getSeries, getTestById } from \"../../helpers/test.service\";\nimport RpsChart from \"../../components/Series/RpsChart\";\nimport SystemMetrics from \"../../components/Metrics/SystemMetrics\";\nimport DateInfo from \"../../components/Metrics/DataInfo\";\nimport Info from \"../../components/Metrics/Info\";\nimport { PageHeader, Typography, Tag, Button } from \"antd\";\nimport ReactJson from \"react-json-view\";\nimport DepTimeChart from '../../components/Series/DepTimeChart';\n\n\nexport default function DetailView() {\n    let { id } = useParams();\n    const [test, setTest] = React.useState();\n    const [series, setSeries] = React.useState(undefined);\n    const [temp, setTemp] = React.useState(0);\n\n    const mapValues = (someArr) => someArr.values.map(item => ({\n        time: item[0],\n        code: item[1],\n        respTime: item[2],\n        rps: item[3]\n    }));\n    React.useEffect(() => {\n        console.log('update state');\n        Promise.all([\n            getTestById(id)\n                .then(item => {\n                    setTest(item);\n\n                }),\n            getSeries(id)\n                .then(item => {\n                    if (item && item.length > 0 && item[0].Series !== null)\n                        setSeries(mapValues(item[0].Series[0]))\n                }),\n        ])\n    }, [id]);\n    React.useEffect(() => {\n        const len = temp;\n\n        const interval = setInterval(async () =>\n            getSeries(id)\n                .then(item => {\n                    if (item && item.length > 0 && item[0].Series !== null) {\n\n                        setSeries(mapValues(item[0].Series[0]))\n                        console.log(\n                            \"work\"\n                        )\n                        if (temp < item[0].Series[0].values.length) {\n                            console.log(\n                                \"work\"\n                            )\n                            clearInterval(interval)\n                        }\n                        setTemp(item[0].Series[0].values.length)\n\n\n                    }\n\n                })\n\n            , 10000)\n\n\n    }, [id, temp])\n\n\n    const avr = (data, mapExpresssion) => {\n        if (data) {\n            const sum = data.map(mapExpresssion).reduce((a, b) => a + b, 0);\n            return (sum / data.length) || 0;\n        }\n        else {\n            return 0;\n        }\n    }\n    const rpSource = { rps: avr(series, (item) => item.rps), avRes: avr(series, (item) => item.time - item.respTime), maxRes: '100ms', minRes: '0ms' };\n    return (\n        <React.Fragment>\n            {test && <PageHeader\n                className=\"site-page-header\"\n                onBack={() => null}\n                tags={<><Tag color=\"blue\">{test.Uuid} </Tag> <Tag color=\"green\">{test.Status} </Tag></>}\n                title={`Детализация  тестирования `}\n            />}\n            <div>\n                <div className=\"info-flex \">\n                    {series !== undefined && <RpsChart source={series} />}\n                </div>\n                <div className=\"info-flex \">\n                    {series !== undefined && <DepTimeChart source={series} />}\n                </div>\n                <div className=\"dashboard-info-container\">\n                    <div className=\"info-flex \">\n                        {series !== undefined && <SystemMetrics sysMetrics={series} />}\n                    </div>\n                    <div className=\"info-flex \">\n                        {test !== undefined && <DateInfo source={test} />}\n                    </div>\n                    <div className=\"info-flex \">\n                        {series !== undefined && <Info source={rpSource} />}\n                    </div>\n                </div>\n                <div key=\"f\" className=\"info-flex \">\n                    <Typography.Title level={3}>Конфигурация теста</Typography.Title>\n                    {test !== undefined &&\n                        <ReactJson collapsed={true}\n                            src={JSON.parse(test.ConfigFile !== undefined ? test.ConfigFile : { root: '' })} />}\n                </div>\n            </div>\n\n\n\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport { Button, notification, Form, PageHeader, Input } from \"antd\";\nimport { createNode } from \"../../helpers/node.service\";\nimport uuidv4 from \"../../helpers/uuid\";\n\n\nexport default function AddNode() {\n    const model = { Uuid: uuidv4(), Host: '', DatabaseUrl: '' };\n    const sendForm = () => {\n        createNode(model).then(() => {\n            notification.open({\n                message: 'Узел создан успешно',\n                onClick: () => {\n\n                },\n            });\n        })\n    };\n    return (\n        <React.Fragment>\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={() => null}\n                title=\"Добавление узла\"\n                subTitle=\"Добавление узла\"\n            />\n            <div>\n                <Form\n                    labelCol={{\n                        span: 4,\n                    }}\n                    wrapperCol={{\n                        span: 14,\n                    }}\n                    layout=\"horizontal\"\n                    size=\"middle\"\n                >\n                    <Form.Item label=\"Наименование  узла\">\n                        <Input onChange={value => model.name = value.target.value} />\n                    </Form.Item>\n                    <Form.Item label=\"URL  узла\">\n                        <Input onChange={value => model.Host = value.target.value} />\n                    </Form.Item>\n                    <Form.Item label=\"URL  базы данных\">\n                        <Input onChange={value => model.DatabaseUrl = value.target.value} />\n                    </Form.Item>\n                    <Form.Item>\n                        <Button color=\"primary\" onClick={sendForm}>Сохранить </Button>\n\n                        <Button>Отменить</Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        </React.Fragment>\n    )\n}","import React from 'react';\n\n\n\nexport default function  RemoveNode() {\n    return (\n        <React.Fragment>\n\n        </React.Fragment>\n    )\n}","import React from 'react'\r\nimport { getUsersList, removeUser } from '../../helpers/user.service';\r\nimport { Button, PageHeader, Table } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport { getListTest, removeTest, startTest, stopTest } from \"../../helpers/test.service\";\r\nimport { notification } from 'antd';\r\n\r\nconst { Column } = Table;\r\n\r\n\r\n\r\nconst testAction = (text, record, action, removeState) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n           \r\n\r\n            <Button onClick={() => {\r\n                removeUser(record.ID).then(() => notification.open({\r\n                    message: 'Пользователь удален успешно',\r\n                    onClick: () => {\r\n                    },\r\n                })).then(\r\n                    () => action(!removeState)\r\n                );\r\n            }}>Удалить</Button>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default function UsersList() {\r\n    const [testCollection, setCollection] = React.useState([]);\r\n    const [needFetch, setNeedFetch] = React.useState(true);\r\n    React.useEffect(() => {\r\n        getUsersList().then(data => {\r\n            console.log(data);\r\n            setCollection(data);\r\n        })\r\n    }, [needFetch]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageHeader\r\n                className=\"site-page-header\"\r\n                onBack={() => null}\r\n                title=\"Список пользователей\"\r\n            />\r\n           <Table dataSource={testCollection} className=\"shadow-flex\">\r\n                <Column title=\"ID пользователя\" dataIndex=\"ID\" key=\"ID\" />\r\n                <Column title=\"Наименование\" dataIndex=\"Username\" key=\"Username\" />\r\n                <Column title=\"Уровень доступа\" dataIndex=\"AccessLevel\" key=\"AccessLevel\" />\r\n                <Column\r\n                    title=\"Действия\"\r\n                    key=\"action\"\r\n                    render={(text, record) => testAction(text, record, setNeedFetch, needFetch)}\r\n                />\r\n            </Table>\r\n\r\n        </React.Fragment>\r\n    )\r\n}","\r\nimport apiUrl from './consts';\r\n\r\n\r\n\r\nexport function createUser(user: { Username: string; Password: string }) {\r\n    return apiUrl.AUTH_API.post(apiUrl.POST_CREATE, user).then((res) => res.data)\r\n\r\n}\r\nexport function removeUser(userId: number) {\r\n    return apiUrl.AUTH_API.post(apiUrl.POST_REMOVE + userId).then((res) => res.data)\r\n\r\n}\r\n\r\nexport function getUsersList() {\r\n    return apiUrl.AUTH_API.get(apiUrl.GET_LIST).then((res) => res.data)\r\n\r\n}","import React from 'react'\r\nimport { Input, Form, PageHeader, InputNumber, Button, notification } from 'antd';\r\nimport { createUser } from '../../helpers/user.service';\r\n\r\nfunction CreateUser() {\r\n    const [userData, setUserData] = React.useState({ Username: '', Password: '', AccessLevel: 0 });\r\n\r\n\r\n    const sendDataForm = () => [\r\n        createUser(userData).then(() => {\r\n            notification.open({\r\n                message: 'Пользователь создан  успешно',\r\n                onClick: () => {\r\n\r\n                },\r\n            });\r\n        }).catch(() => {\r\n            notification.open({\r\n                message: 'Ошибка создания  пользователя',\r\n                onClick: () => {\r\n\r\n                },\r\n            });\r\n        })\r\n    ]\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                className=\"site-page-header\"\r\n                onBack={() => null}\r\n                title=\"Добавление пользователя\"\r\n                subTitle=\"Добавление пользователя\"\r\n            />\r\n            <Form\r\n            onFinish={sendDataForm}\r\n                labelCol={{\r\n                    span: 4,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 14,\r\n                }}\r\n                layout=\"horizontal\"\r\n                style={{ padding: '0 24px 24px' }}\r\n\r\n                size=\"middle\"\r\n            >\r\n\r\n                <Form.Item label=\"Имя пользователя\">\r\n                    <Input onChange={value => setUserData({ ...userData, Username: value.target.value })} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Пароль\">\r\n                    <Input type=\"password\" onChange={value => setUserData({ ...userData, Password: value.target.value })} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Уровень доступа\">\r\n                    <InputNumber style={{ width: \"200px\" }} placeholder=\"Уровень доступа\" onChange={value => {\r\n                        if (value !== undefined) {\r\n                            setUserData({ ...userData, AccessLevel: value })\r\n                        }\r\n                    }} />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Добавить пользователя</Button>\r\n                   \r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUser\r\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown';\nimport { getDoc } from '../helpers/doc';\n\nfunction IntroPage() {\n    const [doc, setDoc] = React.useState<string>();\n    React.useEffect(() => {\n        getDoc().then(md => setDoc(md))\n    })\n    return (\n        <div className=\"info-flex quark-documentation\">\n            <ReactMarkdown source={doc} />\n        </div>\n    )\n}\n\nexport default IntroPage\n","import axios from 'axios';\r\n\r\n\r\n\r\nexport function getDoc() {\r\n    return axios.get(\"https://raw.githubusercontent.com/vinogradnick/quark-lt/master/README.md\").then(res => res.data)\r\n     \r\n}","import React from 'react';\nimport HeaderQuark from '../components/HeaderQuark';\nimport { Layout, Menu, Breadcrumb, Typography } from 'antd';\nimport Sidebar from '../components/Sidebar/Sidebar';\nimport { Switch, Route } from 'react-router-dom';\n\nimport AddTest from \"./Tests/AddTest\";\nimport ViewTests from \"./Tests/ViewTests\";\nimport ViewNodes from \"./Nodes/ViewNodes\";\nimport DetailView from \"./Tests/DetailView\";\nimport AddNode from \"./Nodes/AddNode\";\nimport RemoveNode from \"./Nodes/RemoveNode\";\nimport TestCreate from '../components/Test/TestCreate';\nimport UsersList from './Users/UsersList';\nimport CreateUser from './Users/CreateUser';\nimport IntroPage from './IntroPage';\n\n\nexport default function Dashboard({ match }) {\n    console.log(match);\n    return (\n        <React.Fragment>\n\n            <Layout>\n\n                <Sidebar />\n\n                <Layout style={{ padding: '0 24px 24px' }}>\n                    <Switch>\n\n                        <Route path={`${match.path}/test/add`} component={AddTest} />\n                        <Route path={`${match.path}/doc`}>\n                            <IntroPage />\n                        </Route>\n                        <Route path={`${match.path}/users/list`}>\n                            <UsersList />\n                        </Route>\n                        <Route path={`${match.path}/users/add`}>\n                            <CreateUser />\n                        </Route>\n                        <Route path={`${match.path}/test/list`}>\n                            <ViewTests />\n                        </Route>\n                        <Route path={`${match.path}/test/detail/:id`}>\n                            <DetailView />\n                        </Route>\n                        <Route path={`${match.path}/node/list`}>\n                            <ViewNodes />\n                        </Route>\n                        <Route path={`${match.path}/node/add`}>\n                            <AddNode />\n                        </Route>\n                        <Route path={`${match.path}/node/remove/:id`}>\n                            <RemoveNode />\n                        </Route>\n\n                    </Switch>\n\n                </Layout>\n\n            </Layout>\n\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport { Layout, Dropdown, Button, Menu } from 'antd';\nimport { Link } from 'react-router-dom'\nimport logo from '../assets/images/logo.png'\nimport { DownOutlined } from '@ant-design/icons';\nimport { authStore, AuthStore } from '../store/authStore';\nimport { observer, inject } from \"mobx-react\"\nimport { toJS } from 'mobx';\nconst { Header } = Layout;\nconst menu = (\n    <Menu>\n        <Menu.Item>\n            <Link to={'/logout'} >\n                Выйти из аккаунта\n        </Link>\n        </Menu.Item>\n\n    </Menu>\n);\n@inject('authStore')\n@observer\nexport default class HeaderQuark extends React.Component<{ authStore?: AuthStore }> {\n    render() {\n        const { authStore } = this.props\n        console.log(toJS(authStore?.getAuthState))\n        return (\n            <Header className=\"header\" >\n                <div className=\"logo-container\">\n                    <img src={logo} alt=\"\" />\n                    <div className=\"logo\">\n                        QuarkLT\n        </div>\n                </div>\n                {authStore?.getAuthState && (<div className=\"account\">\n                    <Dropdown overlay={menu}>\n                        <div className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                            Аккаунт <DownOutlined />\n                        </div>\n                    </Dropdown>\n                </div>)}\n\n\n            </Header >)\n    }\n\n}\n","import { Layout, Menu, Breadcrumb, Typography, Result } from 'antd';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport React from \"react\";\n\nimport { AuthStore } from \"../store/authStore\";\nimport { inject, observer } from \"mobx-react\";\nimport LoginPage from \"./Login/LoginPage\";\nimport Dashboard from \"./Dashboard\";\nimport HeaderQuark from \"../components/HeaderQuark\";\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\n@inject(\"authStore\")\n@observer\nexport default class MainPage extends React.Component<{ authStore?: AuthStore }, {}> {\n  componentDidMount() {\n    const { authStore } = this.props;\n    if (!authStore?.getAuthState) {\n      authStore?.authorize()\n     \n    }\n  }\n  render() {\n    const { authStore } = this.props;\n    console.log(authStore?.getAuthState);\n    if (authStore?.getAuthState) {\n      authStore?.authorize();\n    }\n\n    // @ts-ignore\n    return (\n      <Layout className=\"layflex\">\n        <Router>\n          <HeaderQuark authStore={authStore} />\n\n          <Layout>\n            <Switch>\n              <Route path=\"/logout\" render={() => {\n                authStore?.logout()\n                return <Redirect to={'/'} />\n              }} />\n              <Route strict={true} exact path=\"/\">\n                <LoginPage />\n              </Route>\n              <Route path=\"/dashboard\" render={Dashboard} />\n              <Route path=\"*\" render={() => <Result\n                status=\"404\"\n                title=\"404\"\n                subTitle=\"Опа, страница не найдена\"\n                extra={<Link to={'/dashboard'}>Вернуться домой</Link>}\n              />} />\n\n            </Switch>\n          </Layout>\n        </Router>\n      </Layout>\n    );\n  }\n}\n","import React from 'react'\nimport MainPage from './pages/MainPage'\nimport {Provider} from 'mobx-react'\nimport {authStore} from \"./store/authStore\";\nfunction Root() {\n\n    return (\n        <>\n            <Provider authStore={authStore}>\n                <MainPage/>\n            </Provider>\n\n        </>\n    )\n}\n\nexport default Root\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport Root from './Root'\nimport './index.scss'\nimport 'antd/dist/antd.min.css'\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}